25.11.2019

IoC Inversion of Control
	--> Factory
	--> Naming Service
	
Container enthält Komponenten und kann diese zurückgeben falls nötig
Container löst Abhängigkeiten auf --> Dependency Injection
--> DI Container
Bean definition via xml, @nnotations oder Java code
	implizit mit @nnotations (@Component)
	explizit mit xml oder Java code
	
Standartmäßig sind Spring Beans Singletons (Beim Startup inizialisiert)

JavaEE
	Client Tier (Browser, App, ...)
	Presentation Tier (JSF, ThymeLeaf, html templates, Rest) (@Controller, @RestController)
	Buisness Tier (Logik & Transaktionen) (@Service)
	Integration Tier (Kapselung Datenzugriff) (@Respository)
	Resource Tier (normalerweise nicht in unserer Anwendung)
	
@Autowired (Constructor dependency injection)
	Parameter für Konstruktor kommt aus Container
	@Inject ist standard für JavaEE (CDI Framework verwendet aber Inject, also verwirrend)
	
@Component (@Named)

Explizite Bean Definition in Java @Configuration
	@Bean (name="abcd")
	Mehrere Beans vom selben Typ möglich (Unterscheidung über den Namen)

Lombok
    settings > Annotation Processors > Enable annotation processing
    Lombok Plugin installieren
    
@SpringBootApplication
    alles in Subverzeichnissen wird von Spring erkannt.
    
@Data
    generiert
        getters/setters
        toString
        hashCode
        equals

wenn man einer Bean keinen Namen gibt, wird der Methodenname verwendet.

Ist ein Profile gesetzt, wird dieses ignoriert, außer diese Profile ist gesetzt
    Profiles in Umgebungsvariablen findet man oft auf Container Lösungen
        java -D spring.profiles.acticve=<profileNamesSeperatedByComma>
    kann auch über application.properties gesetzt werden (wird von Umgebungsvariablen überschrieben)
    
Configuration kann dynamisch über einen Config Server geladen werden.

Conditions werden beispielsweise genutzt, um zu builden je nachdem, was im classpath ist

@Primary --> Component hat Vorzug bei DI

Eigene Annotations
    --> immer RetentionPolicy.RUNTIME, um Annotations auch in ByteCode zu übernehmen
    
_______________________________________________________________________________________________________________________________________

26.11.2019

Beim Scope mit Session kann man angeben, ob mit Klassen oder Interfaces gearbeitet werden kann.

Mit $ statt # kann man Property file values injizieren

Aspects
    Über den ProceedingJoinPoint kriegt man alle AufrufInfos
    
JPA
    owning side ist die mit dem Fremdschlüssel drinnen
    Flyway --> DB Versionierung
    
    Entity Manager auf keinen Fall aufheben, immer nur für eine Transaktion
        Entity Manager cached Resultate und gibt diese an User
        User kann Daten ändern
        EM überprüft, was sich geändert hat und schreibt das in die DB
        
        em.flush() zwingt EM, die Daten in die Datenbank zu schieben.l
        
        die managed entity aus em.merge() immer speichern, das ist die neue managed entity
    
    Möglichkeiten
        in properties DB oder Entities setzen
        JPARepository interface mit Standardmethoden
        Methodenname
        @Query
        
    RepositoryCustom als 2. Parameter für eigene Methoden
    
    DerbyDB setup
        dependency ins pom
        zip runterladen und entpacken
        
    @Entity von javax.persistence
    
    Zusammengesetzte Primärschlüssel --> Embeddable implementieren und dann zu ID Member mittels @EmbeddedId anfügen
    
    EnumType.STRING statt ORDINAL verwenden, weil bei Löschen eines Wertes sich das ganze Enum sonst verschiebt
        --> noch besser ist eine Tabelle fürs Enum mit Referenz durch Fremdschlüssel
        
    JpaRepository implementieren genügt, um es zur Bean zu machen.
    
    end und begin sind reservierte Keywords, nicht als Columns verwenden
    
    JPA zu Project Structure Modules hinzufügen für bessere Unterstützung
    
    
    
    ToOne Beziehungen werden umgehend aus der Datenbank geholt. (Eager)
    ToMany Beziehungen werden lazy geladen
    
    In ToMany ist die owning site immer die n Seite
    
    
    
    Reihenfolge der persist() ist wichtig. Natürlich müssen erst die Entities persistiert werden, bevor Fremdschlüssel auf sie referenzieren können.
    Dies kann auch gemeinsam passieren, kommt aber auf den UseCase an, da vielleicht nicht der ganze Baum, sondern nur die oberste Klasse oder ähnliches gespeichert werden sollen (zB Training ohne Students)
    
_______________________________________________________________________________________________________________________________________

27.11.2019

ResponseEntity als Wrapper für Rückgabe Object von Request

@GetMapping

STRG+9 --> Spring Context neustarten

@AutoConfigureMockMvc

_______________________________________________________________________________________________________________________________________

28.11.2019

_______________________________________________________________________________________________________________________________________

29.11.2019

_______________________________________________________________________________________________________________________________________
